version: 2.1
executors:
  default:
    docker:
      - image: cimg/go:1.18.1-node
  docker-build:
    docker:
      - image: docker:stable

install_buildx: &install_buildx
  name: Install Docker buildx
  command: |
    mkdir -p ~/.docker/cli-plugins
    curl -sSL -o ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64
    chmod a+x ~/.docker/cli-plugins/docker-buildx

install_goreleaser: &install_goreleaser
  name: Install goreleaser
  command: |
    GORELEASER_URL="https://github.com/goreleaser/goreleaser/releases/download/v1.8.3/goreleaser_Linux_x86_64.tar.gz"
    curl --output goreleaser_Linux_x86_64.tar.gz \
      --silent --show-error --location --fail --retry 3 \
      "$GORELEASER_URL"
    sudo mkdir -p /tmp/goreleaser
    sudo tar -C /tmp/goreleaser -xzf goreleaser_Linux_x86_64.tar.gz
    sudo mv /tmp/goreleaser/goreleaser /usr/local/bin/
    rm -f goreleaser_Linux_x86_64.tar.gz
    goreleaser --version

install_awscli: &install_awscli
  name: Install pre-requisites
  command: |
    DIR=$(mktemp -d) && pushd $DIR
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    ./aws/install -i $HOME/.local/aws-cli -b $HOME/.local/bin
    popd && rm -r $DIR

jobs:
  lint:
    executor:
      name: default
    steps:
      - checkout
      - run: make lint

  test:
    executor:
      name: default
    steps:
      - checkout
      - run: make test

  build-image:
    executor:
      name: default
    environment:
      DOCKER_BUILDKIT: 1
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.12
      - run: *install_buildx
      - run: *install_goreleaser
      - run: make goreleaser-snapshot

  build-push-main:
    executor:
      name: default
    environment:
      DOCKER_BUILDKIT: 1
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.12
      - run: *install_buildx
      - run: *install_goreleaser
      - run: make goreleaser-snapshot
      - run:
          command: |
            echo ${DOCKERHUB_SECRET} | docker login -u ${DOCKERHUB_USER} --password-stdin
            docker push falcosecurity/falcosidekick-ui:latest

  build-push-ecr:
    executor:
      name: default
    environment:
      DOCKER_BUILDKIT: 1
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.12
      - run: *install_buildx
      - run: *install_goreleaser
      - run: *install_awscli
      - run:
          command: |
            make goreleaser-snapshot
      - run:
          command: |
            docker tag falcosecurity/falcosidekick-ui:latest \
              public.ecr.aws/falcosecurity/falcosidekick-ui:latest
      - run:
          command: |
            aws ecr-public get-login-password --region us-east-1 | \
              docker login --username AWS --password-stdin public.ecr.aws/falcosecurity
            docker push public.ecr.aws/falcosecurity/falcosidekick-ui:latest

  release:
    executor:
      name: default
    environment:
      DOCKER_BUILDKIT: 1
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.12
      - run: *install_buildx
      - run: *install_goreleaser
      - run:
          name: Prepare env
          command: |
            echo ${DOCKERHUB_SECRET} | docker login -u ${DOCKERHUB_USER} --password-stdin
            aws ecr-public get-login-password --region us-east-1 | \
              docker login --username AWS --password-stdin public.ecr.aws/falcosecurity
      - run:
          name: Release
          no_output_timeout: 1h
          command: make goreleaser

workflows:
  main:
    jobs:
      - test
      - lint
      - build-image:
          requires:
            - test
            - lint
          filters:
            branches:
              ignore: master
      - build-push-main:
          context: falco
          requires:
            - test
            - lint
          filters:
            branches:
              only: master
      - build-push-ecr:
          context: test-infra
          requires:
            - test
            - lint
          filters:
            branches:
              only: master
      - release:
          context: falco
          requires:
            - test
            - lint
            - build-image
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
